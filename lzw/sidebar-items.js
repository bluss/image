initSidebarItems({"enum":[["Bits","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough"]],"fn":[["encode","Convenience function that reads and compresses all bytes from `R`."]],"struct":[["Decoder","Decoder for a LZW compressed stream (this algorithm is used for GIF files). The maximum supported code size is 16 bits. The decoder assumes two  special code word to be present in the stream:`CLEAR_CODE == 1 << min_code_size` `END_CODE   == CLEAR_CODE + 1` Furthermore the decoder expects the stream to start with a `CLEAR_CODE`. This  corresponds to the implementation needed for en- and decoding GIF and TIFF files."],["DecoderEarlyChange","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files). The maximum supported code size is 16 bits. The decoder assumes two  special code word to be present in the stream:`CLEAR_CODE == 1 << min_code_size` `END_CODE   == CLEAR_CODE + 1` Furthermore the decoder expects the stream to start with a `CLEAR_CODE`. This  corresponds to the implementation needed for en- and decoding GIF and TIFF files."],["Encoder","LZW encoder using the algorithm of GIF files."],["LsbReader","Reads bits from a byte stream, LSB first."],["LsbWriter","Writes bits to a byte stream, LSB first."],["MsbReader","Reads bits from a byte stream, MSB first."],["MsbWriter","Writes bits to a byte stream, MSB first."]],"trait":[["BitReader","A bit reader."],["BitWriter","A bit writer."]]});